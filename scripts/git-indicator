#!/bin/sh

name=`basename $0`

homedir=~/.$name
log=$homedir/log
app_share=/usr/local/share/$name
cmd=$app_share/bin/$name
cron=$app_share/bin/$name.cron

pid_file=$log/$name.pid
cron_pid_file=$log/$name.cron.pid
arg_file=$log/$name.arg
stdout_log=$log/access.log
stderr_log=$log/error.err

get_pid() {
    cat "$pid_file"
}

get_cron_pid() {
    cat "$cron_pid_file"
}

get_arg() {
    cat "$arg_file"
}

is_running() {
    [ -f "$pid_file" ] && ps `get_pid` > /dev/null 2>&1
}

is_cron_running() {
    [ -f "$cron_pid_file" ] && ps `get_cron_pid` > /dev/null 2>&1
}

case "$1" in

    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting $name"
        [ ! -d $log ] && mkdir -p $log
        echo "" > "$arg_file"
        cd $homedir
        ulimit -n 65536 && $cmd `get_arg` >> "$stdout_log" 2>> "$stderr_log" &
        echo $! > "$pid_file"
        $cron >/dev/null &
        echo $! > "$cron_pid_file"
        if ! is_running; then
            echo "Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;

    stop)
    if is_running; then
        echo -n "Stopping $name.."
        kill -9 `get_pid` && kill -9 `get_cron_pid`
        for i in {1..10}; do
            if ! is_running;
                then break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "> Application stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi

        if is_cron_running; then
            echo "Cron still running"
            exit 1
        else
            echo "> Cron stopped"
            if [ -f "$cron_pid_file" ]; then
                rm "$cron_pid_file"
            fi
        fi
        pkill notify-osd
        echo "> Notify OSD stopped"
    else
        echo "Not running"
    fi
    ;;

    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    [ -d $log ] && echo "63" > "$arg_file"
    $0 start
    [ -d $log ] && echo "" > "$arg_file"
    ;;

    status)
    if is_running; then
        pid=`get_pid`
        echo "Git-Indicator App running with pid $pid"
    else
        echo "Stopped"
        exit 1
    fi
    if is_cron_running; then
        cront_pid=`get_cron_pid`
        echo "Git-Indicator Cron running with pid $cront_pid"
    else
        echo "Stopped"
        exit 1
    fi
    ;;

    pid)
        pid=`get_pid`
        echo "$pid"
    ;;

    memory)
        while true
        do
            date=`date`
            app_pid=`get_pid`
            app_rss=`awk -F " " '/VmRSS/{ printf $2 }' /proc/$app_pid/status`
            app_vsz=`awk -F " " '/VmSize/{ printf $2 }' /proc/$app_pid/status`
            cron_pid=`get_cron_pid`
            cron_rss=`awk -F " " '/VmRSS/{ printf $2 }' /proc/$cron_pid/status`
            cron_vsz=`awk -F " " '/VmSize/{ printf $2 }' /proc/$cron_pid/status`
            echo "--- $date"
            echo "> Application: VmSize= $app_vsz KiB / VmRSS= $app_rss"
            echo "> Cron: VmSize= $cron_vsz KiB / VmRSS= $cron_rss"
            sleep 5
        done
    ;;

    access)
        cat "$stdout_log"
    ;;

    error)
        cat "$stderr_log"
    ;;

    *)
    echo "Usage: $0 {start|stop|restart|status|pid|memory|access|error}"
    exit 1
    ;;

esac

exit 0
